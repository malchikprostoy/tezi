const Lesson = require("../models/Lesson");
const Task = require("../models/Task");
const mongoose = require("mongoose");

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —É—Ä–æ–∫–∞
const generateCode = () =>
  Math.random().toString(36).substring(2, 8).toUpperCase(); // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —É—Ä–æ–∫–∞

// üìå –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
const createLesson = async (req, res) => {
  try {
    const { title } = req.body; // –£–±–∏—Ä–∞–µ–º description, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω

    if (!title) {
      return res.status(400).json({ message: "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!" });
    }

    const lesson = new Lesson({
      title,
      teacherId: req.user.userId,
      code: generateCode(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞
    });

    await lesson.save();

    res.status(201).json({ message: "‚úÖ –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω", lesson });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —É—Ä–æ–∫—É
const joinLesson = async (req, res) => {
  try {
    const { code } = req.body;
    const userId = req.user?.userId?.toString(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ userId - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

    if (!code) {
      return res.status(400).json({ error: "–ö–æ–¥ —É—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!" });
    }

    if (!userId) {
      return res.status(400).json({ error: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!" });
    }

    // –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É
    const lesson = await Lesson.findOne({ code });
    if (!lesson) {
      return res.status(404).json({ error: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ObjectId
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId!" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if (lesson.students.some((studentId) => studentId.toString() === userId)) {
      return res.status(400).json({ error: "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫!" });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    lesson.students.push(userId);
    await lesson.save();

    res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!", lessonId: lesson._id });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ joinLesson:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
};

const getStudentLessons = async (req, res) => {
  try {
    const userId = req.query.userId || req.user?.userId;
    if (!userId) {
      return res.status(400).json({ error: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!" });
    }

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!" });
    }

    const lessons = await Lesson.find({ students: userId.toString() }).lean();

    res.json({ lessons });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
};

const leaveLesson = async (req, res) => {
  try {
    const { lessonId } = req.params;
    const userId = req.user?.userId?.toString(); // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

    if (!lessonId || !mongoose.Types.ObjectId.isValid(lessonId)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞!" });
    }

    if (!userId) {
      return res.status(400).json({ error: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!" });
    }

    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ error: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É—Ä–æ–∫
    const isStudent = lesson.students.some(
      (studentId) => studentId.toString() === userId
    );

    if (!isStudent) {
      return res.status(400).json({ error: "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫!" });
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    lesson.students = lesson.students.filter(
      (studentId) => studentId.toString() !== userId
    );

    await lesson.save();

    res.json({ message: "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —É—Ä–æ–∫", lessonId });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
};

const getLessonById = async (req, res) => {
  try {
    const { lessonId } = req.params;

    if (!lessonId || lessonId === "undefined") {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Ä–æ–∫–∞" });
    }

    const lesson = await Lesson.findById(lessonId).populate("tasks");

    if (!lesson) {
      return res.status(404).json({ error: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.status(200).json(lesson);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getMyLessons = async (req, res) => {
  try {
    const lessons = await Lesson.find({ teacherId: req.user.userId });
    res.json({ lessons });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateLesson = async (req, res) => {
  try {
    const { id } = req.params;
    const { title } = req.body;

    // –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫
    const lesson = await Lesson.findById(id);
    if (!lesson) {
      return res.status(404).json({ message: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É—Ä–æ–∫–∞
    if (req.user.role !== "teacher") {
      return res
        .status(403)
        .json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
    lesson.title = title || lesson.title;
    await lesson.save();

    res.json({ message: "–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", lesson });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const deleteLesson = async (req, res) => {
  try {
    const lesson = await Lesson.findByIdAndDelete(req.params.id);
    if (!lesson) {
      return res.status(404).json({ message: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getStudentsByLessonId = async (req, res) => {
  try {
    const lesson = await Lesson.findById(req.params.lessonId).populate(
      "students",
      "name email"
    );
    if (!lesson) return res.status(404).json({ message: "Lesson not found" });

    res.json(lesson.students);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", error);
    res.status(500).json({ message: "Failed to get students" });
  }
};

module.exports = {
  createLesson,
  joinLesson,
  getMyLessons,
  getStudentLessons,
  getLessonById,
  leaveLesson,
  updateLesson,
  deleteLesson,
  getStudentsByLessonId,
};
